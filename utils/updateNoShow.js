const TimeSlotBooking = require("../models/timeSlotBookingModel");
const Customer = require("../models/customerModel");

const updateNoShowAndReputation = async () => {
  try {
    const now = new Date();

    // L·∫•y ng√†y h√¥m tr∆∞·ªõc (YYYY-MM-DD)
    const yesterday = new Date();
    yesterday.setDate(yesterday.getDate() - 1);
    yesterday.setHours(0, 0, 0, 0); // Ng√†y h√¥m qua, 00:00

    // T√¨m t·∫•t c·∫£ booking "pending" c·ªßa ng√†y h√¥m tr∆∞·ªõc
    const pendingBookings = await TimeSlotBooking.find({
      status: "pending",
      date: yesterday,
    }).populate("user");

    for (const booking of pendingBookings) {
      // C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh "no-show"
      booking.status = "no-show";
      await booking.save();

      // Tr·ª´ 10 ƒëi·ªÉm uy t√≠n (kh√¥ng d∆∞·ªõi 0)
      if (booking.user && booking.user.reputation_score > 0) {
        const newScore = Math.max(0, booking.user.reputation_score - 10);
        await Customer.findByIdAndUpdate(booking.user._id, {
          reputation_score: newScore,
        });

        console.log(
          `üî¥ ƒê√£ tr·ª´ 10 ƒëi·ªÉm uy t√≠n cho kh√°ch: ${booking.user.full_name}`
        );
      }
    }

    console.log("‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i no-show ho√†n t·∫•t!");
  } catch (error) {
    console.error("‚ùå L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i no-show:", error);
  }
};

module.exports = updateNoShowAndReputation;
